<%- include('../layouts/header.ejs')%>
<style>
  #pdf {
    text-align: center;
}

#pdf canvas {
    border: 1px solid black;
    width: 95%;
}
</style>

  <!-- Header Section Begin -->
  <header class="header">
    <div class="header__top">
      <div class="container">
        <div class="row">
          <div class="col-lg-6 col-md-7">
            <div class="header__top__left">

            </div>
          </div>
          <div class="col-lg-6 col-md-5">
            <div class="header__top__right">
              <div class="header__top__links">

              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="container">
      <div class="row">
        <div class="col-lg-3 col-md-3">
          <div class="header__logo">
            <a class="navbar-brand logo-size"><img src="assets/logos/thriftedkicks.png" alt="Thriffy" /></a>
          </div>
        </div>
      </div>
      <div class="canvas__open"><i class="fa fa-bars"></i></div>
    </div>
  </header>
  <!-- Header Section End -->
  <div class="container d-flex align-items-center justify-content-center">
    <div class="row">
      <div class="col mx-auto">
        <h2 class="LSpacing">ORDER DETAILS</h2>
      </div>
    </div>
  </div>
  <input type="hidden" value="<%= order.OrderStatus %>" id="progressStatus">

  <div class="container">
    <br>
    <% if(typeof order !=='undefined' ) { %>
      
      <input type="hidden" id="shippingAddress" value="<%= JSON.stringify(order.shippingAddress) %>">
      <input type="hidden" id="orderDate" value="<%= order.orderDate %>">
      <input type="hidden" id="productsArray" value="<%= JSON.stringify(order.products) %>">
      <input type="hidden" id="orderId" value="<%= order._id %>">

      <table class="table">
        <thead>
          <tr>
            <th scope="col">#</th>
            <th scope="col">Product</th>
            <th scope="col">Name</th>
            <th scope="col">Unit Price</th>
            <th scope="col">Quantity</th>
            <th scope="col">Ordered On</th>
            <th scope="col">Status</th>
          </tr>
        </thead>

        

        <tbody class="table-group-divider">
          <% for(let i=0; i< order.products.length; i++ ){ %>
            <tr>
              <td scope="row">
                <%= i+1 %>
              </td>
              <td>
                <a href="/productView?id=<%=order.products[i].productId._id %>">
                  <img src="<%= order.products[i].productId.image.path1 %>" style="height: 200px; width: 200px;">
                </a>
              </td>

              <td class="p-4">
                <a href="/productView?id=<%=order.products[i].productId._id %>">
                  <%= order.products[i].productId.productName %>
                </a>
              </td>

              <td class="p-4 text-bold text-lg">
                <a href="/productView?id=<%=order.products[i].productId._id %>">
                  ₹ <%= order.products[i].unitPrice %>
                </a>
              </td>

              <td class="p-4 text-bold ">&nbsp;&nbsp;<%= order.products[i].quantity %>
              </td>
              <td class="p-4">
                <%= order.orderDate.toLocaleDateString() %>
              </td>
              <td class="orderStatusElem text-bold <%= order.products[i].ProductOrderStatus === 'Ordered' ? 'text-dark' : '' %>
                        <%= order.products[i].ProductOrderStatus === 'Cancelled' ? 'text-danger' : '' %>
                        <%= order.products[i].ProductOrderStatus === 'Out for Delivery' ? 'text-info' : '' %>
                        <%= order.products[i].ProductOrderStatus === 'Shipped' ? 'text-info' : '' %>
                        <%= order.products[i].ProductOrderStatus === 'Delivered' ? 'text-success' : '' %>
                        <%= order.products[i].ProductOrderStatus === 'Returned' ? 'text-danger' : '' %>"
                style="width: 250px;">
                <%= order.products[i].ProductOrderStatus%>
                  <br>
                  <% if( order.products[i].ProductOrderStatus === 'Returned' ){ %>
                   <br> <p>On  <%= order.products[i].returnOrderStatus?.date?.toLocaleDateString() %> </p>
                    <%   }  %>

                  <% if(order.products[i].ProductOrderStatus!=='Returned' ){ %>
                  <% if(order.products[i].ProductOrderStatus==='Delivered' ){ %>
                    <button class="btn-dark mt-5 returnProdBtn" data-prodId="<%= order.products[i].productId._id %>"
                      data-orderId="<%= order._id %>" data-image="<%= order.products[i].productId.image.path1 %>"
                      style="display: '<%= order.products[i].ProductOrderStatus === 'Returned' ? 'none' : 'inline' %>;">Return
                      Product</button>
                    <% }else{ %>
                    
                      <button class="btn-dark mt-5 productCancelBtn"
                        data-prodId="<%= order.products[i].productId._id %>" data-orderId="<%= order._id %>"
                        style="display: <%= order.products[i].ProductOrderStatus === 'Cancelled' ? 'none' : 'inline' %>;">Cancel
                        product</button>
                      <% } %>
                      <% } %>

              </td>
            </tr>
            <% } %>


            <ul class="step-wizard-list m-3 mb-5">
              <li id="forPending" class="step-wizard-item ">
                  <span class="progress-count">1</span>
                  <span class="progress-label">Ordered</span>
              </li>
              <li id="forDispatched" class="step-wizard-item ">
                  <span class="progress-count">2</span>
                  <span class="progress-label">Dispatched</span>
              </li>
              <li id="forOutForDelivery" class="step-wizard-item">
                  <span class="progress-count">3</span>
                  <span class="progress-label">Out for delivery</span>
              </li>
              <li id="forDelivered" class="step-wizard-item ">
                  <span class="progress-count">4</span>
                  <span class="progress-label">Delivered</span>
              </li>
          </ul>
        </tbody>
      </table>

      <div class="container d-flex justify-content-center">
        <button class="m-4 primary-btn" id="downloadInvoiceBtn">Download invoice</button>
        <button class="m-4 primary-btn" id="viewInvBtn" >View invoice</button>
      </div>
    
      <% } %>
        <div class="d-flex justify-content-center align-items-center">
          <input type="hidden" value="<%= order._id %>" id="orderIdElem">

          <!-- <% if( order.OrderStatus !=='Cancelled' && order.OrderStatus !=='Delivered'){ %>
            <a type="button" id="cancelOrder" class="primary-btn mb-3 text-white">Cancel Order</a>
            <% } else { %>
              <a class="primary-btn mb-3 text-white">Order Cancelled</a>
              <% } %> -->


        </div>
  </div>
  <div id="pdf" class="mt-4"></div>


  <div class="container align-items-center">
    <div class="row">
      <div class="col mx-auto d-flex">
        <p id="shippingAddress" class="ml-5 mt-4 bg-light p-4 text-bold" style="font-size:large;"><span style="font-size:x-large;">Shipping Address :</span><br><br> <span><%= order.shippingAddress.fullName +' , '+order.shippingAddress.houseName +' , '+ order.shippingAddress.city +' , '+ order.shippingAddress.state +' , '+order.shippingAddress.country +' , PinCode : '+ order.shippingAddress.pincode + ' , '+order.shippingAddress.mobile  %></span></p>
      </div>
      <div class="col mx-auto">
        <p class="ml-5 mt-4 bg-light p-4 text-bold" style="font-size:large;"><span style="font-size:x-large;">Order Id :</span> <span><%= order._id %> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
        <p class="ml-5 mt-4 bg-light p-4 text-bold" style="font-size:large;"><span style="font-size:x-large;">Track Id : </span><span><%= order.trackId %> </span></p>
      </div>
    </div>

    <div class="col mx-auto d-flex" >
      <p class="ml-5 mr-5 mt-4 bg-light p-4 text-bold" style="font-size:large;  min-width: 550px;"><span style="font-size:x-large;">Payment Method : </span> <span><%= order.paymentMethod %></span></p>
      <p class="ml-5 mt-4 bg-light p-4 text-bold" style="font-size:large;"><span style="font-size:x-large;">Total Amount :</span> <span style="font-size: x-large;">₹ <%= order.totalAmount %></span></p>
    </div>
    <div class="col mx-auto d-flex" >
      <% if(order.coupon){ %>
        <p class="ml-5 mt-4 bg-light p-4 text-bold" style="font-size:large; width: 550px;"><span style="font-size:x-large;">Coupon details :</span> <br><br>  <span>Coupon Name: <%= order.coupon.couponName %> <br><br> </span> <span>Coupon Code: <%= order.coupon.code %> <br><br></span></span> <span>Coupon Discount: ₹ <%= order.coupon.discount_amount %> <br><br></span></p>
      
      <% } %>
    </div>
    
  </div>
  



  <!-- Footer Section Begin -->
  <footer class="footer">
    <div class="container">
      <div class="row">
        <div class="col-lg-3 col-md-6 col-sm-6">
          <div class="footer__about">
            <div class="footer__logo">
              <a href="#"><img src="img/footer-logo.png" alt=""></a>
            </div>
            <p>The customer is at the heart of our unique business model, which includes design.</p>
            <a href="#"><img src="img/payment.png" alt=""></a>
          </div>
        </div>
        <div class="col-lg-2 offset-lg-1 col-md-3 col-sm-6">
          <div class="footer__widget">
            <h6>Shopping</h6>
            <ul>
              <li><a href="#">Clothing Store</a></li>
              <li><a href="#">Trending Shoes</a></li>
              <li><a href="#">Accessories</a></li>
              <li><a href="#">Sale</a></li>
            </ul>
          </div>
        </div>
        <div class="col-lg-2 col-md-3 col-sm-6">
          <div class="footer__widget">
            <h6>Shopping</h6>
            <ul>
              <li><a href="#">Contact Us</a></li>
              <li><a href="#">Payment Methods</a></li>
              <li><a href="#">Delivary</a></li>
              <li><a href="#">Return & Exchanges</a></li>
            </ul>
          </div>
        </div>
        <div class="col-lg-3 offset-lg-1 col-md-6 col-sm-6">
          <div class="footer__widget">
            <h6>NewLetter</h6>
            <div class="footer__newslatter">
              <p>Be the first to know about new arrivals, look books, sales & promos!</p>
              <form action="#">
                <input type="text" placeholder="Your email">
                <button type="submit"><span class="icon_mail_alt"></span></button>
              </form>
            </div>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-lg-12 text-center">
          <div class="footer__copyright__text">
            <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
            <p>Copyright ©
              <script>
                document.write(new Date().getFullYear());
              </script>2020
              All rights reserved | This template is made with <i class="fa fa-heart-o" aria-hidden="true"></i> by <a
                href="https://colorlib.com" target="_blank">Colorlib</a>
            </p>
            <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
          </div>
        </div>
      </div>
    </div>
  </footer>
  <!-- Footer Section End -->



  <script src="https://unpkg.com/pdfjs-dist/build/pdf.min.js"></script>
  <script src="https://unpkg.com/pdfjs-dist/build/pdf.worker.min.js"></script>
  <script src="https://unpkg.com/pdfjs-dist@2.3.200/build/pdf.min.js"></script>

  <script>
    // const cancelOrderBtn = document.getElementById('cancelOrder')
    const orderIdElem = document.getElementById('orderIdElem')
    const orderStatusElem = document.querySelectorAll('.orderStatusElem')


    // cancelOrderBtn.addEventListener('click', CancelOrderFn)

    async function CancelOrderFn() {
      try {
        const orderId = orderIdElem.value

        Swal.fire({
          title: "Are you sure you want to cancel this order?",
          text: "You won't be able to revert this!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, Cancel Order !"
        }).then(async (result) => {
          if (result.isConfirmed) {

            const response = await fetch(`/cancelOrder`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ orderId }),
            })
            const data = await response.json();
            console.log(data.message);
            if (data.message) {
              Swal.fire({
                title: "Order Cancelled!",
                text: "Your order has been cancelled.",
                icon: "success"
              });
              orderStatusElem.forEach((element) => {
                element.textContent = "Cancelled"
              });
              cancelOrderBtn.style.display = 'none';
            }
          }
        });


      } catch (error) {
        console.log("Could not Cancel Order");
      }
    }


    //Product cancel function
    const productCancelBtns = document.querySelectorAll('.productCancelBtn')
    productCancelBtns.forEach((btn) => {
      btn.addEventListener('click', cancelProductOrderFn)
    })

    async function cancelProductOrderFn() {
      try {
        const productId = this.getAttribute('data-prodId')
        const orderId = this.getAttribute('data-orderId')

        Swal.fire({
          title: "Are you sure you want to cancel this order?",
          text: "You won't be able to revert this!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, Cancel Order !"
        }).then(async (result) => {
          if (result.isConfirmed) {

            const response = await fetch(`/orders/cancelProdOrder`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ productId, orderId }),
            })

            const data = await response.json();

            if (data.message) {

              this.style.display = 'none'
              this.parentNode.classList = []
              this.parentNode.classList.add('text-danger', 'text-bold')
              this.parentNode.textContent = "Cancelled"


              Swal.fire({
                title: "Order Cancelled!",
                text: "Your product order has been cancelled.",
                icon: "success"
              }).then((response) => {
                if (data.wallet) {

                  const Toast = Swal.mixin({
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                      toast.onmouseenter = Swal.stopTimer;
                      toast.onmouseleave = Swal.resumeTimer;
                    }
                  });
                  Toast.fire({
                    icon: "success",
                    title: data.wallet
                  });
                }
              })

            }
          }
        });
      } catch (error) {
        console.log("Could not cancel order");
      }
    }


    //product return functionality
    const returnProdBtn = document.querySelectorAll('.returnProdBtn')
    returnProdBtn.forEach((btn)=>{
      btn.addEventListener('click',returnProductFn)
    })

    async function returnProductFn(){
      try {
        const prodId = this.getAttribute('data-prodId')
        const orderId = this.getAttribute('data-orderId')
      
      
        Swal.fire({
          title: "Are you sure?",
          text: "You won't be able to revert this!",
          icon: "warning",
          imageUrl: this.dataset.image,
          imageHeight: 100,
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, return it!"
        }).then((result) => {
          if (result.isConfirmed) {

          Swal.fire({
                html:`
                    <h4> Choose a return reason </h4>
                    <select id="returnReason" name="reason">
                      <option value="">Select a reason...</option>
                      <option value="Defective">Defective or Damaged Product</option>
                      <option value="Wrong Item">Wrong Item Received</option>
                      <option value="Size">Size or Fit Issues</option>
                      <option value="Quality">Quality Issues</option>
                      <option value="Wrong Item">Product not as Described</option>
                    </select>
                `
          }).then(async (response)=>{
            const returnReason = document.getElementById('returnReason').value
            if(returnReason === ""){
              const Toast = Swal.mixin({
                    toast: true,
                    position: "center",
                    showConfirmButton: false,
                    timer: 2000,
                    didOpen: (toast) => {
                      toast.onmouseenter = Swal.stopTimer;
                      toast.onmouseleave = Swal.resumeTimer;
                    }
                  });
                  return Toast.fire({
                    icon: "error",
                    title: "Choose a valid reason"
                  });
            }else{
              const response = await fetch(`/return-product`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ returnReason,prodId,orderId }),
            })

            const data = await response.json();
            if(data.message){

              const Toast = Swal.mixin({
              toast: true,
              position: "top-end",
              showConfirmButton: false,
              timer: 4000,
              didOpen: (toast) => {
                toast.onmouseenter = Swal.stopTimer;
                toast.onmouseleave = Swal.resumeTimer;
              } 
              });
              Toast.fire({
                icon: "success",
                text: data.message + " and wallet credited with refund amount"
              })
                this.style.display = 'none'
                this.parentNode.classList = []
                this.parentNode.classList.add('text-bold')
                this.parentNode.textContent = "Returned"
            }
            }
          })
  }
});
      } catch (error) {
        console.log("Unable to return product");
      }
    }
  

    const progressStatus = document.getElementById('progressStatus')
    const forPending = document.getElementById('forPending')
    const forDispatched = document.getElementById('forDispatched')
    const forOutForDelivery = document.getElementById('forOutForDelivery')
    const forDelivered = document.getElementById('forDelivered')
    if(progressStatus.value === 'Pending'){
      forDispatched.classList.add('current-item')
    }
    if(progressStatus.value === 'Shipped'){
      forOutForDelivery.classList.add('current-item')
    }
    if(progressStatus.value === 'Out for Delivery'){
      forDelivered.classList.add('current-item')
    }
    if(progressStatus.value === 'Delivery'){
      forDelivered.classList.add('current-item')
    }



    //for downloading invoice function------------------------------------------------------------------
    const downloadInvoiceBtn = document.getElementById('downloadInvoiceBtn')
    downloadInvoiceBtn.addEventListener('click',downloadInvoiceFn)

    const shipAddress = JSON.parse(document.getElementById('shippingAddress').value)

    const orderDate = new Date(document.getElementById('orderDate').value).toLocaleDateString()
    const dueDate = new Date(orderDate);
    dueDate.setDate(dueDate.getDate() + 10)

    const products = document.getElementById('productsArray').value
    const productsArr = JSON.parse(products)

    const orderId = document.getElementById('orderId').value 
    const invoiceNum = 'INV-'+ orderId.slice(5,13) 

    async function downloadInvoiceFn(){

    var data = {
    "customize": {
    },
    "images": {
        // The logo on top of your invoice
        "logo": "https://public.budgetinvoice.com/img/logo_en_original.png",
        // The invoice background
    },
    // Your own data
    "sender": {
        "company": "Thrift Kicks",
        "address": "Calicut",
        "zip": "565436",
        "city": "Town Street",
        "country": "India"
        
    },
    // Your recipient
    "client": {
        "company": shipAddress.fullName,
        "address": shipAddress.houseName,
        "zip": shipAddress.pincode,
        "state":shipAddress.state,
        "city": shipAddress.city,
        "country": shipAddress.country
        
    },
    "information": {
         // Invoice number
        "number": invoiceNum,
        // Invoice data
        "date": orderDate,
        // Invoice due date
        "due-date": dueDate.toLocaleDateString()   

    },
    "products":[],
  
    // Settings to customize your invoice
    "settings": {
        "currency": "INR", 
    },
    "translate": {
      
    },
};

for (let i = 0; i < productsArr.length ; i++) {
  if( (productsArr[i].ProductOrderStatus !== 'Returned') && (productsArr[i].ProductOrderStatus !== 'Returned') ){
    const product = {
      "quantity": productsArr[i].quantity,
      "description":productsArr[i].productId.productName,
      "tax-rate": 0,
      "price": productsArr[i].unitPrice
  };
  data.products.push(product);
  }
}


easyinvoice.createInvoice(data, function (result) {
    console.log('PDF base64 string: ', result.pdf);
    easyinvoice.download('invoice.pdf')
});

}





//for Viewing invoice function------------------------------------------------------------------
const viewInvoiceBtn = document.getElementById('viewInvBtn')
viewInvBtn.addEventListener('click',viewInvoiceFn) 

// viewInvoiceFn()
    
async function viewInvoiceFn(){
    
    var data = {
  "customize": {
    
  },
  "images": {
    "logo": "https://public.budgetinvoice.com/img/logo_en_original.png",
      // The invoice background
  },
  // Your own data
  "sender": {
      "company": "Thrift Kicks",
      "address": "Calicut",
      "zip": "565436",
      "city": "Town Street",
      "country": "India"
      
  },
  // Your recipient
  "client": {
      "company": shipAddress.fullName,
      "address": shipAddress.houseName,
      "zip": shipAddress.pincode,
      "state":shipAddress.state,
      "city": shipAddress.city,
      "country": shipAddress.country
      
  },
  "information": {
       // Invoice number
      "number": invoiceNum,
      // Invoice data
      "date": orderDate,
      // Invoice due date
      "due-date": dueDate.toLocaleDateString()   

  },
  

  "products":[],

  // Settings to customize your invoice
  "settings": {
      "currency": "INR", 
  },
  "translate": {
    
  },
};

for (let i = 0; i < productsArr.length ; i++) {
  if( (productsArr[i].ProductOrderStatus !== 'Cancelled') && productsArr[i].ProductOrderStatus !== 'Returned'){
    const product = {
      "quantity": productsArr[i].quantity,
      "description":productsArr[i].productId.productName,
      "tax-rate": 0,
      "price": productsArr[i].unitPrice
  };
  data.products.push(product);
  }
}

const elementId = 'pdf';
const pdfElem = document.getElementById('pdf')

const result = await easyinvoice.createInvoice(data);

console.log('Invoice Data:', data);
console.log('Invoice Result:', result);

const options = {
      margin: 10,
      filename: 'invoice.pdf',
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: {
        unit: 'mm',          // Use millimeters for units
        format: 'a10',        // Specify the page format (you can use other formats)
        orientation: 'portrait',  // Set to 'landscape' for a landscape-oriented PDF
      }
    };

    
await easyinvoice.render(elementId, result.pdf ,options);


    }

  </script>

  <%- include('../layouts/footer.ejs')%>